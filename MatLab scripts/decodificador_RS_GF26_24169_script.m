clear; clc;
%% Decodificador Reed Solomon GF(2^6)
%tamaño de bloque |cantidad de datos  |numero de paridades  |número de bits
n = 24;             k = 16;              t2 = 8;               m = 6;
% a^0 + a^n x^1 + a^n x^2 + ... + a^n x^(2^m-1)

% %% m(x) = [alpha^1 ... alpha^1] codificador VHDL
c_x = { [1 1 1 0 0 0] %70 x23
        [1 0 1 1 0 1] %55 x22
        [1 1 1 1 0 0] %74 x21
        [0 0 0 0 1 1] %03 x20
        [1 0 0 0 0 0] %40 x19
        [1 0 1 0 1 1] %53 x18
        [0 1 0 0 1 1] %23 x17
        [0 0 1 1 0 0] %14 x16
        [0 0 0 0 1 0] %02 x15 -16 datos
        [0 0 0 0 1 0] %02 x14
        [0 0 0 0 1 0] %02 x13
        [0 0 0 0 1 0] %02 x12
        [0 0 0 0 1 0] %02 x11
        [0 0 0 0 1 0] %02 x10
        [0 0 0 0 1 0] %02 x9
        [0 0 0 0 1 0] %02 x8
        [0 0 0 0 1 0] %02 x7
        [0 0 0 0 1 0] %02 x6
        [0 0 0 0 1 0] %02 x5
        [0 0 0 0 1 0] %02 x4
        [0 0 0 0 1 0] %02 x3
        [0 0 0 0 1 0] %02 x2
        [0 0 0 0 1 0] %02 x1
        [0 0 0 0 1 0] %02 x0
        };

%% m(x) = [alpha^0 ... alpha^15] codificador VHDL
% c_x = {[1 0 1 1 0 1] [0 1 1 0 1 0] [1 0 1 1 0 1] [0 0 0 0 0 0] [0 1 0 1 0 1] [1 1 1 0 1 0] [1 1 0 1 1 1] [1 0 0 0 1 0] [0 0 0 0 0 1] [0 0 0 0 1 0] [0 0 0 1 0 0] [0 0 1 0 0 0] [0 1 0 0 0 0] [1 0 0 0 0 0] [0 0 0 0 1 1] [0 0 0 1 1 0] [0 0 1 1 0 0] [0 1 1 0 0 0] [1 1 0 0 0 0] [1 0 0 0 1 1] [0 0 0 1 0 1] [0 0 1 0 1 0] [0 1 0 1 0 0] [1 0 1 0 0 0]};

e_x = { [0 0 0 0 0 0] %x0
        [0 0 0 0 0 1] %x1
        [0 0 0 0 0 1] %x2
        [0 0 0 0 0 1] %x3
        [0 0 0 0 0 1] %x4
        [0 0 0 0 0 0] %x5
        [0 0 0 0 0 0] %x6
        [0 0 0 0 0 0] %x7
        [0 0 0 0 0 0] %x8
        [0 0 0 0 0 0] %x9
        [0 0 0 0 0 0] %x10
        [0 0 0 0 0 0] %x11
        [0 0 0 0 0 0] %x12
        [0 0 0 0 0 0] %x13
        [0 0 0 0 0 0] %x14
        [0 0 0 0 0 0] %x15
        [0 0 0 0 0 0] %x16
        [0 0 0 0 0 0] %x17
        [0 0 0 0 0 0] %x18
        [0 0 0 0 0 0] %x19
        [0 0 0 0 0 0] %x20
        [0 0 0 0 0 0] %x21
        [0 0 0 0 0 0] %x22
        [0 0 0 0 0 0] %x23----
        [0 0 0 0 0 0] %x24
        [0 0 0 0 0 0] %x25
        [0 0 0 0 0 0] %x26
        [0 0 0 0 0 0] %x27
        [0 0 0 0 0 0] %x28
        [0 0 0 0 0 0] %x29
        [0 0 0 0 0 0] %x30
        [0 0 0 0 0 0] %x31
        [0 0 0 0 0 0] %x32
        [0 0 0 0 0 0] %x33
        [0 0 0 0 0 0] %x34
        [0 0 0 0 0 0] %x35----
        }; 
for i_aux = 1:n
    r_x{i_aux} = sum_vec_GF26( e_x{i_aux},c_x{i_aux} );
end
sindrom_pot = SindromGF26( r_x , t2 )
% for i_aux = 1:numel(sindrom_pot)
%         alphaGF26(sindrom_pot(i_aux))
% end
A_x = BerlekampMasseyGF26(t2 , sindrom_pot );
A_x
[betas,Et] = ChienGF26(A_x,t2)
[ex_vec,ex_pot] = Forney_ex_GF26(sindrom_pot, t2/2, A_x(2:end), betas, Et);
% ex_vec{1:Et}